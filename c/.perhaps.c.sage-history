"// C version of perhaps code\n\n#include <stdio.h>\n\n// input: quad (a quadruple of curvatures)\n// output: solutions (list of transformed quadruples)\n// function: this runs quadruples through the four transformations (one for each curvature), and records the new one only if the transformed curvature is bigger than the original (so a smaller circle in the packing)\nint * transform(int quad[4]) {\n    \n    int solutions[4][4] = {NULL};\n    int a = quad[0];\n    int b = quad[1];\n    int c = quad[2];\n    int d = quad[3];\n    \n    if ((-a + (2 * (b + c + d))) > a) {\n        solutions[0] = {(-a + (2 * (b + c + d))), b, c, d};\n    }\n    if ((-b + (2 * (a + c + d))) > b) {\n        solutions[1] = {a, (-b + (2 * (a + c + d))), c, d};\n    }\n    if ((-c + (2 * (a + b + d))) > c) {\n        solutions[2] = {a, b, (-c + (2 * (a + b + d))), d};\n    }\n    if ((-d + (2 * (a + b + c))) > d) {\n        solutions[3] = {a, b, c, (-d + (2 * (a + b + c)))};\n    }\n    \n    return solutions;\n}\n\nint * check(int * quadlist, int ceiling) {\n    \n    int validQuads[100][4];    // 100 is arbitrary, find the real value\n    int i;                     // iterator vars\n    int length = ;\n    \n    for (i = 0; i < length; i++) {\n        \n    }\n}\n\n\n\n# input: quadList (a list of quadruples), ceiling (the arbitrary limit we don't want to go above)\n# output: validQuads (list of quadruples where every curv is below the ceiling)\ndef check(quadList, ceiling):\n    validQuads = []\n    for quadruple in quadList:\n        valid = True\n        for entry in quadruple:\n            if entry >= ceiling:\n                valid = False\n        if valid:\n            validQuads.append(quadruple)\n    return validQuads"